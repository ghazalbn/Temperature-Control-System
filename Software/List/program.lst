
AVRASM ver. 2.1.30  C:\Users\Amiri\Desktop\Project\Software\List\program.asm Wed Jan 26 21:49:54 2022

C:\Users\Amiri\Desktop\Project\Software\List\program.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Amiri\Desktop\Project\Software\List\program.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Amiri\Desktop\Project\Software\List\program.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Amiri\Desktop\Project\Software\List\program.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Amiri\Desktop\Project\Software\List\program.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Amiri\Desktop\Project\Software\List\program.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\Amiri\Desktop\Project\Software\List\program.asm(1094): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cooler=R4
                 	.DEF _cooler_msb=R5
                 	.DEF _heater=R6
                 	.DEF _heater_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0060 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00002c 0000
00002d 41b4      	.DB  0x0,0x0,0xB4,0x41
                 _0x0:
00002e 6f43
00002f 6c6f
000030 7265
000031 2d2d      	.DB  0x43,0x6F,0x6F,0x6C,0x65,0x72,0x2D,0x2D
000032 203e
000033 464f
000034 0046
000035 6f43      	.DB  0x3E,0x20,0x4F,0x46,0x46,0x0,0x43,0x6F
000036 6c6f
000037 7265
000038 2d2d
000039 203e      	.DB  0x6F,0x6C,0x65,0x72,0x2D,0x2D,0x3E,0x20
00003a 4e4f
00003b 0020
00003c 6548
00003d 7461      	.DB  0x4F,0x4E,0x20,0x0,0x48,0x65,0x61,0x74
00003e 7265
00003f 2d2d
000040 203e
000041 464f      	.DB  0x65,0x72,0x2D,0x2D,0x3E,0x20,0x4F,0x46
000042 0046
000043 6548
000044 7461
000045 7265      	.DB  0x46,0x0,0x48,0x65,0x61,0x74,0x65,0x72
000046 2d2d
000047 203e
000048 4e4f
000049 0020      	.DB  0x2D,0x2D,0x3E,0x20,0x4F,0x4E,0x20,0x0
00004a 6554
00004b 706d
00004c 3a20
00004d 4300      	.DB  0x54,0x65,0x6D,0x70,0x20,0x3A,0x0,0x43
C:\Users\Amiri\Desktop\Project\Software\List\program.asm(1140): warning: .cseg .db misalignment - padding zero byte
00004e 0000      	.DB  0x0
                 _0x2000003:
00004f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000050 0004      	.DW  0x04
000051 0004      	.DW  0x04
000052 0054      	.DW  __REG_VARS*2
                 
000053 0004      	.DW  0x04
000054 0269      	.DW  _step
000055 0058      	.DW  _0x3*2
                 
000056 0007      	.DW  0x07
000057 0260      	.DW  _0xB
000058 0094      	.DW  _0x0*2+56
                 
000059 0002      	.DW  0x02
00005a 0267      	.DW  _0xB+7
00005b 009b      	.DW  _0x0*2+63
                 
00005c 0002      	.DW  0x02
00005d 026d      	.DW  __base_y_G100
00005e 009e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00005f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000060 94f8      	CLI
000061 27ee      	CLR  R30
000062 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000063 e0f1      	LDI  R31,1
000064 bffb      	OUT  GICR,R31
000065 bfeb      	OUT  GICR,R30
000066 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000067 e1f8      	LDI  R31,0x18
000068 bdf1      	OUT  WDTCR,R31
000069 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00006a e08d      	LDI  R24,(14-2)+1
00006b e0a2      	LDI  R26,2
00006c 27bb      	CLR  R27
                 __CLEAR_REG:
00006d 93ed      	ST   X+,R30
00006e 958a      	DEC  R24
00006f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000070 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000071 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000072 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000073 93ed      	ST   X+,R30
000074 9701      	SBIW R24,1
000075 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000076 eae0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000077 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000078 9185      	LPM  R24,Z+
000079 9195      	LPM  R25,Z+
00007a 9700      	SBIW R24,0
00007b f061      	BREQ __GLOBAL_INI_END
00007c 91a5      	LPM  R26,Z+
00007d 91b5      	LPM  R27,Z+
00007e 9005      	LPM  R0,Z+
00007f 9015      	LPM  R1,Z+
000080 01bf      	MOVW R22,R30
000081 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000082 9005      	LPM  R0,Z+
000083 920d      	ST   X+,R0
000084 9701      	SBIW R24,1
000085 f7e1      	BRNE __GLOBAL_INI_LOOP
000086 01fb      	MOVW R30,R22
000087 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000088 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000089 bfed      	OUT  SPL,R30
00008a e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008d e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008e 940c 0110 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;
                 ;int cooler = 0, heater = 0;
                 ;float step = 22.5;
                 
                 	.DSEG
                 ;
                 ;unsigned char int_to_char(int x) {
                 ; 0000 0008 unsigned char int_to_char(int x) {
                 
                 	.CSEG
                 _int_to_char:
                 ; .FSTART _int_to_char
                 ; 0000 0009 	return x + '0';
000090 93ba      	ST   -Y,R27
000091 93aa      	ST   -Y,R26
                 ;	x -> Y+0
000092 81e8      	LD   R30,Y
000093 5de0      	SUBI R30,-LOW(48)
000094 940c 0245 	JMP  _0x2020003
                 ; 0000 000A }
                 ; .FEND
                 ;
                 ;void temp_on_lcd(int value, int c) {
                 ; 0000 000C void temp_on_lcd(int value, int c) {
                 _temp_on_lcd:
                 ; .FSTART _temp_on_lcd
                 ; 0000 000D 	unsigned int r = 0;
                 ; 0000 000E 	unsigned char tens = int_to_char(value / 10);
                 ; 0000 000F 	unsigned char ones = int_to_char(value % 10);
                 ; 0000 0010 	lcd_gotoxy(c, r);
000096 93ba      	ST   -Y,R27
000097 93aa      	ST   -Y,R26
000098 940e 04a6 	CALL __SAVELOCR4
                 ;	value -> Y+6
                 ;	c -> Y+4
                 ;	r -> R16,R17
                 ;	tens -> R19
                 ;	ones -> R18
                +
00009a e000     +LDI R16 , LOW ( 0 )
00009b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00009c 81ae      	LDD  R26,Y+6
00009d 81bf      	LDD  R27,Y+6+1
00009e e0ea      	LDI  R30,LOW(10)
00009f e0f0      	LDI  R31,HIGH(10)
0000a0 940e 0464 	CALL __DIVW21
0000a2 01df      	MOVW R26,R30
0000a3 dfec      	RCALL _int_to_char
0000a4 2f3e      	MOV  R19,R30
0000a5 81ae      	LDD  R26,Y+6
0000a6 81bf      	LDD  R27,Y+6+1
0000a7 e0ea      	LDI  R30,LOW(10)
0000a8 e0f0      	LDI  R31,HIGH(10)
0000a9 940e 0469 	CALL __MODW21
0000ab 01df      	MOVW R26,R30
0000ac dfe3      	RCALL _int_to_char
0000ad 2f2e      	MOV  R18,R30
0000ae 81ec      	LDD  R30,Y+4
0000af 93ea      	ST   -Y,R30
0000b0 2fa0      	MOV  R26,R16
0000b1 d188      	RCALL _lcd_gotoxy
                 ; 0000 0011 	lcd_putchar(tens);
0000b2 2fa3      	MOV  R26,R19
0000b3 d19d      	RCALL _lcd_putchar
                 ; 0000 0012 	lcd_gotoxy(c + 1, r);
0000b4 81ec      	LDD  R30,Y+4
0000b5 5fef      	SUBI R30,-LOW(1)
0000b6 93ea      	ST   -Y,R30
0000b7 2fa0      	MOV  R26,R16
0000b8 d181      	RCALL _lcd_gotoxy
                 ; 0000 0013 	lcd_putchar(ones);
0000b9 2fa2      	MOV  R26,R18
0000ba d196      	RCALL _lcd_putchar
                 ; 0000 0014 }
0000bb 940e 04ab 	CALL __LOADLOCR4
0000bd 9628      	ADIW R28,8
0000be 9508      	RET
                 ; .FEND
                 ;
                 ;void status_on_lcd(int cooler, int heater) {
                 ; 0000 0016 void status_on_lcd(int cooler, int heater) {
                 _status_on_lcd:
                 ; .FSTART _status_on_lcd
                 ; 0000 0017 	lcd_gotoxy(2,1);
0000bf 93ba      	ST   -Y,R27
0000c0 93aa      	ST   -Y,R26
                 ;	cooler -> Y+2
                 ;	heater -> Y+0
0000c1 e0e2      	LDI  R30,LOW(2)
0000c2 93ea      	ST   -Y,R30
0000c3 e0a1      	LDI  R26,LOW(1)
0000c4 d175      	RCALL _lcd_gotoxy
                 ; 0000 0018 	if (!cooler) lcd_putsf("Cooler--> OFF");
0000c5 81ea      	LDD  R30,Y+2
0000c6 81fb      	LDD  R31,Y+2+1
0000c7 9730      	SBIW R30,0
0000c8 f419      	BRNE _0x4
                +
0000c9 e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000ca e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000cb c002      	RJMP _0x3A
                 ; 0000 0019 	else lcd_putsf("Cooler--> ON ");
                 _0x4:
                +
0000cc e6aa     +LDI R26 , LOW ( 2 * _0x0 + ( 14 ) )
0000cd e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW2FN _0x0,14
                 _0x3A:
0000ce d1a6      	RCALL _lcd_putsf
                 ; 0000 001A 
                 ; 0000 001B     lcd_gotoxy(2,2);
0000cf e0e2      	LDI  R30,LOW(2)
0000d0 93ea      	ST   -Y,R30
0000d1 e0a2      	LDI  R26,LOW(2)
0000d2 d167      	RCALL _lcd_gotoxy
                 ; 0000 001C     if (!heater) lcd_putsf("Heater--> OFF");
0000d3 81e8      	LD   R30,Y
0000d4 81f9      	LDD  R31,Y+1
0000d5 9730      	SBIW R30,0
0000d6 f419      	BRNE _0x6
                +
0000d7 e7a8     +LDI R26 , LOW ( 2 * _0x0 + ( 28 ) )
0000d8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW2FN _0x0,28
0000d9 c002      	RJMP _0x3B
                 ; 0000 001D 	else lcd_putsf("Heater--> ON ");
                 _0x6:
                +
0000da e8a6     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
0000db e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
                 _0x3B:
0000dc d198      	RCALL _lcd_putsf
                 ; 0000 001E }
0000dd c030      	RJMP _0x2020004
                 ; .FEND
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input) {
                 ; 0000 0024 unsigned int read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0025 	ADMUX = adc_input | ADC_VREF_TYPE;
0000de 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000df 81e8      	LD   R30,Y
0000e0 64e0      	ORI  R30,0x40
0000e1 b9e7      	OUT  0x7,R30
                 ; 0000 0026 	// Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0027 	delay_us(10);
                +
0000e2 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000e3 958a     +DEC R24
0000e4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0028     // Start the AD conversion
                 ; 0000 0029     ADCSRA |= (1 << ADSC);
0000e5 9a36      	SBI  0x6,6
                 ; 0000 002A     // Wait for the AD conversion to complete
                 ; 0000 002B     while ((ADCSRA & (1 << ADIF)) == 0);
                 _0x8:
0000e6 9b34      	SBIS 0x6,4
0000e7 cffe      	RJMP _0x8
                 ; 0000 002C     ADCSRA |= (1 << ADIF);
0000e8 9a34      	SBI  0x6,4
                 ; 0000 002D     return ADCW;
0000e9 b1e4      	IN   R30,0x4
0000ea b1f5      	IN   R31,0x4+1
0000eb 940c 02b1 	JMP  _0x2020001
                 ; 0000 002E }
                 ; .FEND
                 ;
                 ;float computeDelay(float RPS) {
                 ; 0000 0030 float computeDelay(float RPS) {
                 _computeDelay:
                 ; .FSTART _computeDelay
                 ; 0000 0031     return ((1 / RPS) / (4 * (90 / step))) * 1000; // seconds to miliseconds
0000ed 940e 048f 	CALL __PUTPARD2
                 ;	RPS -> Y+0
0000ef 940e 0485 	CALL __GETD1S0
                +
0000f1 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0000f2 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0000f3 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0000f4 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0000f5 940e 03d6 	CALL __DIVF21
0000f7 937f      	PUSH R23
0000f8 936f      	PUSH R22
0000f9 93ff      	PUSH R31
0000fa 93ef      	PUSH R30
0000fb d1b7      	RCALL SUBOPT_0x0
                +
0000fc e0a0     +LDI R26 , LOW ( 0x40800000 )
0000fd e0b0     +LDI R27 , HIGH ( 0x40800000 )
0000fe e880     +LDI R24 , BYTE3 ( 0x40800000 )
0000ff e490     +LDI R25 , BYTE4 ( 0x40800000 )
                 	__GETD2N 0x40800000
000100 940e 0388 	CALL __MULF12
000102 91af      	POP  R26
000103 91bf      	POP  R27
000104 918f      	POP  R24
000105 919f      	POP  R25
000106 940e 03d6 	CALL __DIVF21
                +
000108 e0a0     +LDI R26 , LOW ( 0x447A0000 )
000109 e0b0     +LDI R27 , HIGH ( 0x447A0000 )
00010a e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
00010b e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
00010c 940e 0388 	CALL __MULF12
                 _0x2020004:
00010e 9624      	ADIW R28,4
00010f 9508      	RET
                 ; 0000 0032 }
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 0034 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0035     int temperature;
                 ; 0000 0036     unsigned int CRS = 4; // initial state: S1
                 ; 0000 0037     float coolerDelay = computeDelay(CRS);
                 ; 0000 0038     int i = 0;
                 ; 0000 0039 
                 ; 0000 003A     // ADC initialization
                 ; 0000 003B     // ADC Clock frequency: 250.000 kHz
                 ; 0000 003C     // ADC Voltage Reference: AVCC pin
                 ; 0000 003D     // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 003E     ADMUX |= (1<<MUX0);
000110 9724      	SBIW R28,4
                 ;	temperature -> R16,R17
                 ;	CRS -> R18,R19
                 ;	coolerDelay -> Y+0
                 ;	i -> R20,R21
                +
000111 e024     +LDI R18 , LOW ( 4 )
000112 e030     +LDI R19 , HIGH ( 4 )
                 	__GETWRN 18,19,4
000113 d1ae      	RCALL SUBOPT_0x1
000114 dfd8      	RCALL _computeDelay
000115 940e 048a 	CALL __PUTD1S0
                +
000117 e040     +LDI R20 , LOW ( 0 )
000118 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000119 9a38      	SBI  0x7,0
                 ; 0000 003F     //ADMUX=ADC_VREF_TYPE;
                 ; 0000 0040     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
00011a e8e5      	LDI  R30,LOW(133)
00011b b9e6      	OUT  0x6,R30
                 ; 0000 0041     SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00011c e0e0      	LDI  R30,LOW(0)
00011d bfe0      	OUT  0x30,R30
                 ; 0000 0042 
                 ; 0000 0043     DDRD=0xFF;
00011e efef      	LDI  R30,LOW(255)
00011f bbe1      	OUT  0x11,R30
                 ; 0000 0044 	PORTD=0x00;
000120 e0e0      	LDI  R30,LOW(0)
000121 bbe2      	OUT  0x12,R30
                 ; 0000 0045 
                 ; 0000 0046     lcd_init(16);
000122 e1a0      	LDI  R26,LOW(16)
000123 d164      	RCALL _lcd_init
                 ; 0000 0047 
                 ; 0000 0048     lcd_gotoxy(2,0);
000124 e0e2      	LDI  R30,LOW(2)
000125 d1a4      	RCALL SUBOPT_0x2
                 ; 0000 0049     lcd_puts("Temp :");
                +
000126 e6a0     +LDI R26 , LOW ( _0xB + ( 0 ) )
000127 e0b2     +LDI R27 , HIGH ( _0xB + ( 0 ) )
                 	__POINTW2MN _0xB,0
000128 d13d      	RCALL _lcd_puts
                 ; 0000 004A 
                 ; 0000 004B     lcd_gotoxy(12, 0);
000129 e0ec      	LDI  R30,LOW(12)
00012a d19f      	RCALL SUBOPT_0x2
                 ; 0000 004C     lcd_putchar(223);
00012b edaf      	LDI  R26,LOW(223)
00012c d124      	RCALL _lcd_putchar
                 ; 0000 004D 
                 ; 0000 004E     lcd_gotoxy(13, 0);
00012d e0ed      	LDI  R30,LOW(13)
00012e d19b      	RCALL SUBOPT_0x2
                 ; 0000 004F     lcd_puts("C");
                +
00012f e6a7     +LDI R26 , LOW ( _0xB + ( 7 ) )
000130 e0b2     +LDI R27 , HIGH ( _0xB + ( 7 ) )
                 	__POINTW2MN _0xB,7
000131 d134      	RCALL _lcd_puts
                 ; 0000 0050 
                 ; 0000 0051     delay_ms(100);
000132 e6a4      	LDI  R26,LOW(100)
000133 e0b0      	LDI  R27,0
000134 940e 02ea 	CALL _delay_ms
                 ; 0000 0052 
                 ; 0000 0053     while (1) {
                 _0xC:
                 ; 0000 0054         unsigned delayInput = 35;
                 ; 0000 0055 
                 ; 0000 0056         temperature = read_adc(0);
000136 9722      	SBIW R28,2
000137 e2e3      	LDI  R30,LOW(35)
000138 83e8      	ST   Y,R30
000139 e0e0      	LDI  R30,LOW(0)
00013a 83e9      	STD  Y+1,R30
                 ;	coolerDelay -> Y+2
                 ;	delayInput -> Y+0
00013b e0a0      	LDI  R26,LOW(0)
00013c dfa1      	RCALL _read_adc
00013d 018f      	MOVW R16,R30
                 ; 0000 0057         temperature = temperature * 0.48898;
00013e 940e 0447 	CALL __CWD1
000140 940e 035a 	CALL __CDF1
                +
000142 e9a6     +LDI R26 , LOW ( 0x3EFA5B96 )
000143 e5bb     +LDI R27 , HIGH ( 0x3EFA5B96 )
000144 ef8a     +LDI R24 , BYTE3 ( 0x3EFA5B96 )
000145 e39e     +LDI R25 , BYTE4 ( 0x3EFA5B96 )
                 	__GETD2N 0x3EFA5B96
000146 940e 0388 	CALL __MULF12
000148 940e 0323 	CALL __CFD1
00014a 018f      	MOVW R16,R30
                 ; 0000 0058         temp_on_lcd(temperature, 9);
00014b 931a      	ST   -Y,R17
00014c 930a      	ST   -Y,R16
00014d e0a9      	LDI  R26,LOW(9)
00014e e0b0      	LDI  R27,0
00014f df46      	RCALL _temp_on_lcd
                 ; 0000 0059 
                 ; 0000 005A 
                 ; 0000 005B 		if(!cooler && !heater && temperature < 15) heater = 1;
000150 2c04      	MOV  R0,R4
000151 2805      	OR   R0,R5
000152 f439      	BRNE _0x10
000153 2c06      	MOV  R0,R6
000154 2807      	OR   R0,R7
000155 f421      	BRNE _0x10
                +
000156 300f     +CPI R16 , LOW ( 15 )
000157 e0e0     +LDI R30 , HIGH ( 15 )
000158 071e     +CPC R17 , R30
                 	__CPWRN 16,17,15
000159 f00c      	BRLT _0x11
                 _0x10:
00015a c004      	RJMP _0xF
                 _0x11:
00015b e0e1      	LDI  R30,LOW(1)
00015c e0f0      	LDI  R31,HIGH(1)
00015d 013f      	MOVW R6,R30
                 ; 0000 005C 
                 ; 0000 005D 		else if(!cooler && !heater && temperature > 35) {cooler = 1; CRS = 4;}
00015e c02c      	RJMP _0x12
                 _0xF:
00015f 2c04      	MOV  R0,R4
000160 2805      	OR   R0,R5
000161 f439      	BRNE _0x14
000162 2c06      	MOV  R0,R6
000163 2807      	OR   R0,R7
000164 f421      	BRNE _0x14
                +
000165 3204     +CPI R16 , LOW ( 36 )
000166 e0e0     +LDI R30 , HIGH ( 36 )
000167 071e     +CPC R17 , R30
                 	__CPWRN 16,17,36
000168 f40c      	BRGE _0x15
                 _0x14:
000169 c006      	RJMP _0x13
                 _0x15:
00016a e0e1      	LDI  R30,LOW(1)
00016b e0f0      	LDI  R31,HIGH(1)
00016c 012f      	MOVW R4,R30
                +
00016d e024     +LDI R18 , LOW ( 4 )
00016e e030     +LDI R19 , HIGH ( 4 )
                 	__GETWRN 18,19,4
                 ; 0000 005E 
                 ; 0000 005F     	else if(cooler && !heater && temperature < 25) cooler = 0;
00016f c01b      	RJMP _0x16
                 _0x13:
000170 2c04      	MOV  R0,R4
000171 2805      	OR   R0,R5
000172 f039      	BREQ _0x18
000173 2c06      	MOV  R0,R6
000174 2807      	OR   R0,R7
000175 f421      	BRNE _0x18
                +
000176 3109     +CPI R16 , LOW ( 25 )
000177 e0e0     +LDI R30 , HIGH ( 25 )
000178 071e     +CPC R17 , R30
                 	__CPWRN 16,17,25
000179 f00c      	BRLT _0x19
                 _0x18:
00017a c003      	RJMP _0x17
                 _0x19:
00017b 2444      	CLR  R4
00017c 2455      	CLR  R5
                 ; 0000 0060 
                 ; 0000 0061         else if(!cooler && heater && temperature > 30) heater = 0;
00017d c00d      	RJMP _0x1A
                 _0x17:
00017e 2c04      	MOV  R0,R4
00017f 2805      	OR   R0,R5
000180 f439      	BRNE _0x1C
000181 2c06      	MOV  R0,R6
000182 2807      	OR   R0,R7
000183 f021      	BREQ _0x1C
                +
000184 310f     +CPI R16 , LOW ( 31 )
000185 e0e0     +LDI R30 , HIGH ( 31 )
000186 071e     +CPC R17 , R30
                 	__CPWRN 16,17,31
000187 f40c      	BRGE _0x1D
                 _0x1C:
000188 c002      	RJMP _0x1B
                 _0x1D:
000189 2466      	CLR  R6
00018a 2477      	CLR  R7
                 ; 0000 0062 
                 ; 0000 0063         status_on_lcd(cooler, heater);
                 _0x1B:
                 _0x1A:
                 _0x16:
                 _0x12:
00018b 925a      	ST   -Y,R5
00018c 924a      	ST   -Y,R4
00018d 01d3      	MOVW R26,R6
00018e df30      	RCALL _status_on_lcd
                 ; 0000 0064 
                 ; 0000 0065         /* S1 -> CRS = 4
                 ; 0000 0066            S2 -> CRS = 6
                 ; 0000 0067            S3 -> CRS = 8
                 ; 0000 0068         */
                 ; 0000 0069 
                 ; 0000 006A 
                 ; 0000 006B         if (CRS == 4 && temperature > 40) { // S1 -> S2
00018f e0e4      	LDI  R30,LOW(4)
000190 e0f0      	LDI  R31,HIGH(4)
000191 17e2      	CP   R30,R18
000192 07f3      	CPC  R31,R19
000193 f421      	BRNE _0x1F
                +
000194 3209     +CPI R16 , LOW ( 41 )
000195 e0e0     +LDI R30 , HIGH ( 41 )
000196 071e     +CPC R17 , R30
                 	__CPWRN 16,17,41
000197 f40c      	BRGE _0x20
                 _0x1F:
000198 c001      	RJMP _0x1E
                 _0x20:
                 ; 0000 006C             CRS = 6;
000199 c024      	RJMP _0x3C
                 ; 0000 006D         } else if (CRS == 6 && temperature < 35) { // S2 -> S1
                 _0x1E:
00019a e0e6      	LDI  R30,LOW(6)
00019b e0f0      	LDI  R31,HIGH(6)
00019c 17e2      	CP   R30,R18
00019d 07f3      	CPC  R31,R19
00019e f421      	BRNE _0x23
                +
00019f 3203     +CPI R16 , LOW ( 35 )
0001a0 e0e0     +LDI R30 , HIGH ( 35 )
0001a1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,35
0001a2 f00c      	BRLT _0x24
                 _0x23:
0001a3 c003      	RJMP _0x22
                 _0x24:
                 ; 0000 006E             CRS = 4;
                +
0001a4 e024     +LDI R18 , LOW ( 4 )
0001a5 e030     +LDI R19 , HIGH ( 4 )
                 	__GETWRN 18,19,4
                 ; 0000 006F         } else if (CRS == 6 && temperature > 45) { // S2 -> S3
0001a6 c019      	RJMP _0x25
                 _0x22:
0001a7 e0e6      	LDI  R30,LOW(6)
0001a8 e0f0      	LDI  R31,HIGH(6)
0001a9 17e2      	CP   R30,R18
0001aa 07f3      	CPC  R31,R19
0001ab f421      	BRNE _0x27
                +
0001ac 320e     +CPI R16 , LOW ( 46 )
0001ad e0e0     +LDI R30 , HIGH ( 46 )
0001ae 071e     +CPC R17 , R30
                 	__CPWRN 16,17,46
0001af f40c      	BRGE _0x28
                 _0x27:
0001b0 c003      	RJMP _0x26
                 _0x28:
                 ; 0000 0070             CRS = 8;
                +
0001b1 e028     +LDI R18 , LOW ( 8 )
0001b2 e030     +LDI R19 , HIGH ( 8 )
                 	__GETWRN 18,19,8
                 ; 0000 0071         } else if (CRS == 8 && temperature < 40) { // S3 -> S2
0001b3 c00c      	RJMP _0x29
                 _0x26:
0001b4 e0e8      	LDI  R30,LOW(8)
0001b5 e0f0      	LDI  R31,HIGH(8)
0001b6 17e2      	CP   R30,R18
0001b7 07f3      	CPC  R31,R19
0001b8 f421      	BRNE _0x2B
                +
0001b9 3208     +CPI R16 , LOW ( 40 )
0001ba e0e0     +LDI R30 , HIGH ( 40 )
0001bb 071e     +CPC R17 , R30
                 	__CPWRN 16,17,40
0001bc f00c      	BRLT _0x2C
                 _0x2B:
0001bd c002      	RJMP _0x2A
                 _0x2C:
                 ; 0000 0072             CRS = 6;
                 _0x3C:
                +
0001be e026     +LDI R18 , LOW ( 6 )
0001bf e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                 ; 0000 0073         }
                 ; 0000 0074 
                 ; 0000 0075         coolerDelay = computeDelay(CRS / ((float) 5));
                 _0x2A:
                 _0x29:
                 _0x25:
0001c0 d101      	RCALL SUBOPT_0x1
                +
0001c1 e0e0     +LDI R30 , LOW ( 0x40A00000 )
0001c2 e0f0     +LDI R31 , HIGH ( 0x40A00000 )
0001c3 ea60     +LDI R22 , BYTE3 ( 0x40A00000 )
0001c4 e470     +LDI R23 , BYTE4 ( 0x40A00000 )
                 	__GETD1N 0x40A00000
0001c5 940e 03d6 	CALL __DIVF21
0001c7 01df      	MOVW R26,R30
0001c8 01cb      	MOVW R24,R22
0001c9 df23      	RCALL _computeDelay
                +
0001ca 83ea     +STD Y + 2 , R30
0001cb 83fb     +STD Y + 2 + 1 , R31
0001cc 836c     +STD Y + 2 + 2 , R22
0001cd 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 0076         if (cooler) delayInput = coolerDelay;
0001ce 2c04      	MOV  R0,R4
0001cf 2805      	OR   R0,R5
0001d0 f029      	BREQ _0x2D
0001d1 01de      	MOVW R26,R28
0001d2 940e 0321 	CALL __CFD1U
0001d4 93ed      	ST   X+,R30
0001d5 93fc      	ST   X,R31
                 ; 0000 0077 
                 ; 0000 0078         for (i = 0; i < 90 / step; i++) {
                 _0x2D:
                +
0001d6 e040     +LDI R20 , LOW ( 0 )
0001d7 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x2F:
0001d8 d0da      	RCALL SUBOPT_0x0
0001d9 01da      	MOVW R26,R20
0001da 940e 044c 	CALL __CWD2
0001dc 940e 0496 	CALL __CDF2
0001de 940e 041b 	CALL __CMPF12
0001e0 f5b0      	BRSH _0x30
                 ; 0000 0079             PORTD = 0; // reset port
0001e1 e0e0      	LDI  R30,LOW(0)
0001e2 bbe2      	OUT  0x12,R30
                 ; 0000 007A             if (cooler) PORTD |= 9;
0001e3 2c04      	MOV  R0,R4
0001e4 2805      	OR   R0,R5
0001e5 f019      	BREQ _0x31
0001e6 b3e2      	IN   R30,0x12
0001e7 60e9      	ORI  R30,LOW(0x9)
0001e8 bbe2      	OUT  0x12,R30
                 ; 0000 007B             if (heater) PORTD |= 144; // 9 << 4
                 _0x31:
0001e9 2c06      	MOV  R0,R6
0001ea 2807      	OR   R0,R7
0001eb f019      	BREQ _0x32
0001ec b3e2      	IN   R30,0x12
0001ed 69e0      	ORI  R30,LOW(0x90)
0001ee bbe2      	OUT  0x12,R30
                 ; 0000 007C             delay_ms(delayInput);
                 _0x32:
0001ef d0dd      	RCALL SUBOPT_0x3
                 ; 0000 007D             if (cooler) {PORTD &= 0xF0; PORTD |= 12;}
0001f0 f019      	BREQ _0x33
0001f1 d0e2      	RCALL SUBOPT_0x4
0001f2 60ec      	ORI  R30,LOW(0xC)
0001f3 bbe2      	OUT  0x12,R30
                 ; 0000 007E             if (heater) {PORTD &= 0x0F; PORTD |= 192; } // 12 << 4
                 _0x33:
0001f4 2c06      	MOV  R0,R6
0001f5 2807      	OR   R0,R7
0001f6 f019      	BREQ _0x34
0001f7 d0e1      	RCALL SUBOPT_0x5
0001f8 6ce0      	ORI  R30,LOW(0xC0)
0001f9 bbe2      	OUT  0x12,R30
                 ; 0000 007F             delay_ms(delayInput);
                 _0x34:
0001fa d0d2      	RCALL SUBOPT_0x3
                 ; 0000 0080             if (cooler) {PORTD &= 0xF0; PORTD |= 6;}
0001fb f019      	BREQ _0x35
0001fc d0d7      	RCALL SUBOPT_0x4
0001fd 60e6      	ORI  R30,LOW(0x6)
0001fe bbe2      	OUT  0x12,R30
                 ; 0000 0081             if (heater) {PORTD &= 0x0F; PORTD |= 96; } // 6 << 4
                 _0x35:
0001ff 2c06      	MOV  R0,R6
000200 2807      	OR   R0,R7
000201 f019      	BREQ _0x36
000202 d0d6      	RCALL SUBOPT_0x5
000203 66e0      	ORI  R30,LOW(0x60)
000204 bbe2      	OUT  0x12,R30
                 ; 0000 0082             delay_ms(delayInput);
                 _0x36:
000205 d0c7      	RCALL SUBOPT_0x3
                 ; 0000 0083             if (cooler) {PORTD &= 0xF0; PORTD |= 3;}
000206 f019      	BREQ _0x37
000207 d0cc      	RCALL SUBOPT_0x4
000208 60e3      	ORI  R30,LOW(0x3)
000209 bbe2      	OUT  0x12,R30
                 ; 0000 0084             if (heater) {PORTD &= 0x0F; PORTD |= 48; } // 3 << 4
                 _0x37:
00020a 2c06      	MOV  R0,R6
00020b 2807      	OR   R0,R7
00020c f019      	BREQ _0x38
00020d d0cb      	RCALL SUBOPT_0x5
00020e 63e0      	ORI  R30,LOW(0x30)
00020f bbe2      	OUT  0x12,R30
                 ; 0000 0085             delay_ms(delayInput);
                 _0x38:
000210 81a8      	LD   R26,Y
000211 81b9      	LDD  R27,Y+1
000212 940e 02ea 	CALL _delay_ms
                 ; 0000 0086         }
                +
000214 5f4f     +SUBI R20 , LOW ( - 1 )
000215 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000216 cfc1      	RJMP _0x2F
                 _0x30:
                 ; 0000 0087     }
000217 9622      	ADIW R28,2
000218 cf1d      	RJMP _0xC
                 ; 0000 0088 }
                 _0x39:
000219 cfff      	RJMP _0x39
                 ; .FEND
                 
                 	.DSEG
                 _0xB:
000260           	.BYTE 0x9
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00021a 93aa      	ST   -Y,R26
00021b b3e5      	IN   R30,0x15
00021c 70ef      	ANDI R30,LOW(0xF)
00021d 2fae      	MOV  R26,R30
00021e 81e8      	LD   R30,Y
00021f 7fe0      	ANDI R30,LOW(0xF0)
000220 2bea      	OR   R30,R26
000221 bbe5      	OUT  0x15,R30
                +
000222 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000223 958a     +DEC R24
000224 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000225 9aaa      	SBI  0x15,2
                +
000226 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000227 958a     +DEC R24
000228 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000229 98aa      	CBI  0x15,2
                +
00022a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00022b 958a     +DEC R24
00022c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00022d c083      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00022e 93aa      	ST   -Y,R26
00022f 81a8      	LD   R26,Y
000230 dfe9      	RCALL __lcd_write_nibble_G100
000231 81e8          ld    r30,y
000232 95e2          swap  r30
000233 83e8          st    y,r30
000234 81a8      	LD   R26,Y
000235 dfe4      	RCALL __lcd_write_nibble_G100
                +
000236 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000237 958a     +DEC R24
000238 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000239 c077      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00023a 93aa      	ST   -Y,R26
00023b 81e8      	LD   R30,Y
00023c e0f0      	LDI  R31,0
00023d 59e3      	SUBI R30,LOW(-__base_y_G100)
00023e 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00023f 81e0      	LD   R30,Z
000240 81a9      	LDD  R26,Y+1
000241 0fae      	ADD  R26,R30
000242 dfeb      	RCALL __lcd_write_data
000243 8099      	LDD  R9,Y+1
000244 8088      	LDD  R8,Y+0
                 _0x2020003:
000245 9622      	ADIW R28,2
000246 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000247 e0a2      	LDI  R26,LOW(2)
000248 d095      	RCALL SUBOPT_0x6
000249 e0ac      	LDI  R26,LOW(12)
00024a dfe3      	RCALL __lcd_write_data
00024b e0a1      	LDI  R26,LOW(1)
00024c d091      	RCALL SUBOPT_0x6
00024d e0e0      	LDI  R30,LOW(0)
00024e 2e8e      	MOV  R8,R30
00024f 2e9e      	MOV  R9,R30
000250 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000251 93aa      	ST   -Y,R26
000252 81a8      	LD   R26,Y
000253 30aa      	CPI  R26,LOW(0xA)
000254 f011      	BREQ _0x2000005
000255 149b      	CP   R9,R11
000256 f048      	BRLO _0x2000004
                 _0x2000005:
000257 e0e0      	LDI  R30,LOW(0)
000258 93ea      	ST   -Y,R30
000259 9483      	INC  R8
00025a 2da8      	MOV  R26,R8
00025b dfde      	RCALL _lcd_gotoxy
00025c 81a8      	LD   R26,Y
00025d 30aa      	CPI  R26,LOW(0xA)
00025e f409      	BRNE _0x2000007
00025f c051      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
000260 9493      	INC  R9
000261 9aa8      	SBI  0x15,0
000262 81a8      	LD   R26,Y
000263 dfca      	RCALL __lcd_write_data
000264 98a8      	CBI  0x15,0
000265 c04b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000266 93ba      	ST   -Y,R27
000267 93aa      	ST   -Y,R26
000268 931a      	ST   -Y,R17
                 _0x2000008:
000269 81a9      	LDD  R26,Y+1
00026a 81ba      	LDD  R27,Y+1+1
00026b 91ed      	LD   R30,X+
00026c 83a9      	STD  Y+1,R26
00026d 83ba      	STD  Y+1+1,R27
00026e 2f1e      	MOV  R17,R30
00026f 30e0      	CPI  R30,0
000270 f019      	BREQ _0x200000A
000271 2fa1      	MOV  R26,R17
000272 dfde      	RCALL _lcd_putchar
000273 cff5      	RJMP _0x2000008
                 _0x200000A:
000274 c010      	RJMP _0x2020002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000275 93ba      	ST   -Y,R27
000276 93aa      	ST   -Y,R26
000277 931a      	ST   -Y,R17
                 _0x200000B:
000278 81e9      	LDD  R30,Y+1
000279 81fa      	LDD  R31,Y+1+1
00027a 9631      	ADIW R30,1
00027b 83e9      	STD  Y+1,R30
00027c 83fa      	STD  Y+1+1,R31
00027d 9731      	SBIW R30,1
00027e 91e4      	LPM  R30,Z
00027f 2f1e      	MOV  R17,R30
000280 30e0      	CPI  R30,0
000281 f019      	BREQ _0x200000D
000282 2fa1      	MOV  R26,R17
000283 dfcd      	RCALL _lcd_putchar
000284 cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x2020002:
000285 8118      	LDD  R17,Y+0
000286 9623      	ADIW R28,3
000287 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000288 93aa      	ST   -Y,R26
000289 b3e4      	IN   R30,0x14
00028a 6fe0      	ORI  R30,LOW(0xF0)
00028b bbe4      	OUT  0x14,R30
00028c 9aa2      	SBI  0x14,2
00028d 9aa0      	SBI  0x14,0
00028e 9aa1      	SBI  0x14,1
00028f 98aa      	CBI  0x15,2
000290 98a8      	CBI  0x15,0
000291 98a9      	CBI  0x15,1
000292 80b8      	LDD  R11,Y+0
000293 81e8      	LD   R30,Y
000294 58e0      	SUBI R30,-LOW(128)
                +
000295 93e0 026f+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000297 81e8      	LD   R30,Y
000298 54e0      	SUBI R30,-LOW(192)
                +
000299 93e0 0270+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00029b e1a4      	LDI  R26,LOW(20)
00029c e0b0      	LDI  R27,0
00029d 940e 02ea 	CALL _delay_ms
00029f d043      	RCALL SUBOPT_0x7
0002a0 d042      	RCALL SUBOPT_0x7
0002a1 d041      	RCALL SUBOPT_0x7
0002a2 e2a0      	LDI  R26,LOW(32)
0002a3 df76      	RCALL __lcd_write_nibble_G100
                +
0002a4 ec88     +LDI R24 , LOW ( 200 )
0002a5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002a6 9701     +SBIW R24 , 1
0002a7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002a8 e2a8      	LDI  R26,LOW(40)
0002a9 df84      	RCALL __lcd_write_data
0002aa e0a4      	LDI  R26,LOW(4)
0002ab df82      	RCALL __lcd_write_data
0002ac e8a5      	LDI  R26,LOW(133)
0002ad df80      	RCALL __lcd_write_data
0002ae e0a6      	LDI  R26,LOW(6)
0002af df7e      	RCALL __lcd_write_data
0002b0 df96      	RCALL _lcd_clear
                 _0x2020001:
0002b1 9621      	ADIW R28,1
0002b2 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _step:
000269           	.BYTE 0x4
                 __base_y_G100:
00026d           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0002b3 91e0 0269 	LDS  R30,_step
0002b5 91f0 026a 	LDS  R31,_step+1
0002b7 9160 026b 	LDS  R22,_step+2
0002b9 9170 026c 	LDS  R23,_step+3
                +
0002bb e0a0     +LDI R26 , LOW ( 0x42B40000 )
0002bc e0b0     +LDI R27 , HIGH ( 0x42B40000 )
0002bd eb84     +LDI R24 , BYTE3 ( 0x42B40000 )
0002be e492     +LDI R25 , BYTE4 ( 0x42B40000 )
                 	__GETD2N 0x42B40000
0002bf 940e 03d6 	CALL __DIVF21
0002c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0002c2 01f9      	MOVW R30,R18
0002c3 2766      	CLR  R22
0002c4 2777      	CLR  R23
0002c5 940e 035a 	CALL __CDF1
0002c7 01df      	MOVW R26,R30
0002c8 01cb      	MOVW R24,R22
0002c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0002ca 93ea      	ST   -Y,R30
0002cb e0a0      	LDI  R26,LOW(0)
0002cc cf6d      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0002cd 81a8      	LD   R26,Y
0002ce 81b9      	LDD  R27,Y+1
0002cf 940e 02ea 	CALL _delay_ms
0002d1 2c04      	MOV  R0,R4
0002d2 2805      	OR   R0,R5
0002d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002d4 b3e2      	IN   R30,0x12
0002d5 7fe0      	ANDI R30,LOW(0xF0)
0002d6 bbe2      	OUT  0x12,R30
0002d7 b3e2      	IN   R30,0x12
0002d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002d9 b3e2      	IN   R30,0x12
0002da 70ef      	ANDI R30,LOW(0xF)
0002db bbe2      	OUT  0x12,R30
0002dc b3e2      	IN   R30,0x12
0002dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0002de df4f      	RCALL __lcd_write_data
0002df e0a3      	LDI  R26,LOW(3)
0002e0 e0b0      	LDI  R27,0
0002e1 940c 02ea 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
0002e3 e3a0      	LDI  R26,LOW(48)
0002e4 df35      	RCALL __lcd_write_nibble_G100
                +
0002e5 ec88     +LDI R24 , LOW ( 200 )
0002e6 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002e7 9701     +SBIW R24 , 1
0002e8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002e9 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002ea 9610      	adiw r26,0
0002eb f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002ec ed80     +LDI R24 , LOW ( 0x7D0 )
0002ed e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002ee 9701     +SBIW R24 , 1
0002ef f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002f0 95a8      	wdr
0002f1 9711      	sbiw r26,1
0002f2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002f3 9508      	ret
                 
                 __ROUND_REPACK:
0002f4 2355      	TST  R21
0002f5 f442      	BRPL __REPACK
0002f6 3850      	CPI  R21,0x80
0002f7 f411      	BRNE __ROUND_REPACK0
0002f8 ffe0      	SBRS R30,0
0002f9 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002fa 9631      	ADIW R30,1
0002fb 1f69      	ADC  R22,R25
0002fc 1f79      	ADC  R23,R25
0002fd f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002fe e850      	LDI  R21,0x80
0002ff 2757      	EOR  R21,R23
000300 f411      	BRNE __REPACK0
000301 935f      	PUSH R21
000302 c073      	RJMP __ZERORES
                 __REPACK0:
000303 3f5f      	CPI  R21,0xFF
000304 f031      	BREQ __REPACK1
000305 0f66      	LSL  R22
000306 0c00      	LSL  R0
000307 9557      	ROR  R21
000308 9567      	ROR  R22
000309 2f75      	MOV  R23,R21
00030a 9508      	RET
                 __REPACK1:
00030b 935f      	PUSH R21
00030c 2000      	TST  R0
00030d f00a      	BRMI __REPACK2
00030e c073      	RJMP __MAXRES
                 __REPACK2:
00030f c06c      	RJMP __MINRES
                 
                 __UNPACK:
000310 e850      	LDI  R21,0x80
000311 2e19      	MOV  R1,R25
000312 2215      	AND  R1,R21
000313 0f88      	LSL  R24
000314 1f99      	ROL  R25
000315 2795      	EOR  R25,R21
000316 0f55      	LSL  R21
000317 9587      	ROR  R24
                 
                 __UNPACK1:
000318 e850      	LDI  R21,0x80
000319 2e07      	MOV  R0,R23
00031a 2205      	AND  R0,R21
00031b 0f66      	LSL  R22
00031c 1f77      	ROL  R23
00031d 2775      	EOR  R23,R21
00031e 0f55      	LSL  R21
00031f 9567      	ROR  R22
000320 9508      	RET
                 
                 __CFD1U:
000321 9468      	SET
000322 c001      	RJMP __CFD1U0
                 __CFD1:
000323 94e8      	CLT
                 __CFD1U0:
000324 935f      	PUSH R21
000325 dff2      	RCALL __UNPACK1
000326 3870      	CPI  R23,0x80
000327 f018      	BRLO __CFD10
000328 3f7f      	CPI  R23,0xFF
000329 f408      	BRCC __CFD10
00032a c04b      	RJMP __ZERORES
                 __CFD10:
00032b e156      	LDI  R21,22
00032c 1b57      	SUB  R21,R23
00032d f4aa      	BRPL __CFD11
00032e 9551      	NEG  R21
00032f 3058      	CPI  R21,8
000330 f40e      	BRTC __CFD19
000331 3059      	CPI  R21,9
                 __CFD19:
000332 f030      	BRLO __CFD17
000333 efef      	SER  R30
000334 efff      	SER  R31
000335 ef6f      	SER  R22
000336 e77f      	LDI  R23,0x7F
000337 f977      	BLD  R23,7
000338 c01a      	RJMP __CFD15
                 __CFD17:
000339 2777      	CLR  R23
00033a 2355      	TST  R21
00033b f0b9      	BREQ __CFD15
                 __CFD18:
00033c 0fee      	LSL  R30
00033d 1fff      	ROL  R31
00033e 1f66      	ROL  R22
00033f 1f77      	ROL  R23
000340 955a      	DEC  R21
000341 f7d1      	BRNE __CFD18
000342 c010      	RJMP __CFD15
                 __CFD11:
000343 2777      	CLR  R23
                 __CFD12:
000344 3058      	CPI  R21,8
000345 f028      	BRLO __CFD13
000346 2fef      	MOV  R30,R31
000347 2ff6      	MOV  R31,R22
000348 2f67      	MOV  R22,R23
000349 5058      	SUBI R21,8
00034a cff9      	RJMP __CFD12
                 __CFD13:
00034b 2355      	TST  R21
00034c f031      	BREQ __CFD15
                 __CFD14:
00034d 9576      	LSR  R23
00034e 9567      	ROR  R22
00034f 95f7      	ROR  R31
000350 95e7      	ROR  R30
000351 955a      	DEC  R21
000352 f7d1      	BRNE __CFD14
                 __CFD15:
000353 2000      	TST  R0
000354 f40a      	BRPL __CFD16
000355 d0e9      	RCALL __ANEGD1
                 __CFD16:
000356 915f      	POP  R21
000357 9508      	RET
                 
                 __CDF1U:
000358 9468      	SET
000359 c001      	RJMP __CDF1U0
                 __CDF1:
00035a 94e8      	CLT
                 __CDF1U0:
00035b 9730      	SBIW R30,0
00035c 4060      	SBCI R22,0
00035d 4070      	SBCI R23,0
00035e f0b1      	BREQ __CDF10
00035f 2400      	CLR  R0
000360 f026      	BRTS __CDF11
000361 2377      	TST  R23
000362 f412      	BRPL __CDF11
000363 9400      	COM  R0
000364 d0da      	RCALL __ANEGD1
                 __CDF11:
000365 2e17      	MOV  R1,R23
000366 e17e      	LDI  R23,30
000367 2011      	TST  R1
                 __CDF12:
000368 f032      	BRMI __CDF13
000369 957a      	DEC  R23
00036a 0fee      	LSL  R30
00036b 1fff      	ROL  R31
00036c 1f66      	ROL  R22
00036d 1c11      	ROL  R1
00036e cff9      	RJMP __CDF12
                 __CDF13:
00036f 2fef      	MOV  R30,R31
000370 2ff6      	MOV  R31,R22
000371 2d61      	MOV  R22,R1
000372 935f      	PUSH R21
000373 df8a      	RCALL __REPACK
000374 915f      	POP  R21
                 __CDF10:
000375 9508      	RET
                 
                 __ZERORES:
000376 27ee      	CLR  R30
000377 27ff      	CLR  R31
000378 2766      	CLR  R22
000379 2777      	CLR  R23
00037a 915f      	POP  R21
00037b 9508      	RET
                 
                 __MINRES:
00037c efef      	SER  R30
00037d efff      	SER  R31
00037e e76f      	LDI  R22,0x7F
00037f ef7f      	SER  R23
000380 915f      	POP  R21
000381 9508      	RET
                 
                 __MAXRES:
000382 efef      	SER  R30
000383 efff      	SER  R31
000384 e76f      	LDI  R22,0x7F
000385 e77f      	LDI  R23,0x7F
000386 915f      	POP  R21
000387 9508      	RET
                 
                 __MULF12:
000388 935f      	PUSH R21
000389 df86      	RCALL __UNPACK
00038a 3870      	CPI  R23,0x80
00038b f351      	BREQ __ZERORES
00038c 3890      	CPI  R25,0x80
00038d f341      	BREQ __ZERORES
00038e 2401      	EOR  R0,R1
00038f 9408      	SEC
000390 1f79      	ADC  R23,R25
000391 f423      	BRVC __MULF124
000392 f31c      	BRLT __ZERORES
                 __MULF125:
000393 2000      	TST  R0
000394 f33a      	BRMI __MINRES
000395 cfec      	RJMP __MAXRES
                 __MULF124:
000396 920f      	PUSH R0
000397 931f      	PUSH R17
000398 932f      	PUSH R18
000399 933f      	PUSH R19
00039a 934f      	PUSH R20
00039b 2711      	CLR  R17
00039c 2722      	CLR  R18
00039d 2799      	CLR  R25
00039e 9f68      	MUL  R22,R24
00039f 01a0      	MOVW R20,R0
0003a0 9f8f      	MUL  R24,R31
0003a1 2d30      	MOV  R19,R0
0003a2 0d41      	ADD  R20,R1
0003a3 1f59      	ADC  R21,R25
0003a4 9f6b      	MUL  R22,R27
0003a5 0d30      	ADD  R19,R0
0003a6 1d41      	ADC  R20,R1
0003a7 1f59      	ADC  R21,R25
0003a8 9f8e      	MUL  R24,R30
0003a9 d027      	RCALL __MULF126
0003aa 9fbf      	MUL  R27,R31
0003ab d025      	RCALL __MULF126
0003ac 9f6a      	MUL  R22,R26
0003ad d023      	RCALL __MULF126
0003ae 9fbe      	MUL  R27,R30
0003af d01d      	RCALL __MULF127
0003b0 9faf      	MUL  R26,R31
0003b1 d01b      	RCALL __MULF127
0003b2 9fae      	MUL  R26,R30
0003b3 0d11      	ADD  R17,R1
0003b4 1f29      	ADC  R18,R25
0003b5 1f39      	ADC  R19,R25
0003b6 1f49      	ADC  R20,R25
0003b7 1f59      	ADC  R21,R25
0003b8 2fe3      	MOV  R30,R19
0003b9 2ff4      	MOV  R31,R20
0003ba 2f65      	MOV  R22,R21
0003bb 2f52      	MOV  R21,R18
0003bc 914f      	POP  R20
0003bd 913f      	POP  R19
0003be 912f      	POP  R18
0003bf 911f      	POP  R17
0003c0 900f      	POP  R0
0003c1 2366      	TST  R22
0003c2 f02a      	BRMI __MULF122
0003c3 0f55      	LSL  R21
0003c4 1fee      	ROL  R30
0003c5 1fff      	ROL  R31
0003c6 1f66      	ROL  R22
0003c7 c002      	RJMP __MULF123
                 __MULF122:
0003c8 9573      	INC  R23
0003c9 f24b      	BRVS __MULF125
                 __MULF123:
0003ca df29      	RCALL __ROUND_REPACK
0003cb 915f      	POP  R21
0003cc 9508      	RET
                 
                 __MULF127:
0003cd 0d10      	ADD  R17,R0
0003ce 1d21      	ADC  R18,R1
0003cf 1f39      	ADC  R19,R25
0003d0 c002      	RJMP __MULF128
                 __MULF126:
0003d1 0d20      	ADD  R18,R0
0003d2 1d31      	ADC  R19,R1
                 __MULF128:
0003d3 1f49      	ADC  R20,R25
0003d4 1f59      	ADC  R21,R25
0003d5 9508      	RET
                 
                 __DIVF21:
0003d6 935f      	PUSH R21
0003d7 df38      	RCALL __UNPACK
0003d8 3870      	CPI  R23,0x80
0003d9 f421      	BRNE __DIVF210
0003da 2011      	TST  R1
                 __DIVF211:
0003db f40a      	BRPL __DIVF219
0003dc cf9f      	RJMP __MINRES
                 __DIVF219:
0003dd cfa4      	RJMP __MAXRES
                 __DIVF210:
0003de 3890      	CPI  R25,0x80
0003df f409      	BRNE __DIVF218
                 __DIVF217:
0003e0 cf95      	RJMP __ZERORES
                 __DIVF218:
0003e1 2401      	EOR  R0,R1
0003e2 9408      	SEC
0003e3 0b97      	SBC  R25,R23
0003e4 f41b      	BRVC __DIVF216
0003e5 f3d4      	BRLT __DIVF217
0003e6 2000      	TST  R0
0003e7 cff3      	RJMP __DIVF211
                 __DIVF216:
0003e8 2f79      	MOV  R23,R25
0003e9 931f      	PUSH R17
0003ea 932f      	PUSH R18
0003eb 933f      	PUSH R19
0003ec 934f      	PUSH R20
0003ed 2411      	CLR  R1
0003ee 2711      	CLR  R17
0003ef 2722      	CLR  R18
0003f0 2733      	CLR  R19
0003f1 2744      	CLR  R20
0003f2 2755      	CLR  R21
0003f3 e290      	LDI  R25,32
                 __DIVF212:
0003f4 17ae      	CP   R26,R30
0003f5 07bf      	CPC  R27,R31
0003f6 0786      	CPC  R24,R22
0003f7 0741      	CPC  R20,R17
0003f8 f030      	BRLO __DIVF213
0003f9 1bae      	SUB  R26,R30
0003fa 0bbf      	SBC  R27,R31
0003fb 0b86      	SBC  R24,R22
0003fc 0b41      	SBC  R20,R17
0003fd 9408      	SEC
0003fe c001      	RJMP __DIVF214
                 __DIVF213:
0003ff 9488      	CLC
                 __DIVF214:
000400 1f55      	ROL  R21
000401 1f22      	ROL  R18
000402 1f33      	ROL  R19
000403 1c11      	ROL  R1
000404 1faa      	ROL  R26
000405 1fbb      	ROL  R27
000406 1f88      	ROL  R24
000407 1f44      	ROL  R20
000408 959a      	DEC  R25
000409 f751      	BRNE __DIVF212
00040a 01f9      	MOVW R30,R18
00040b 2d61      	MOV  R22,R1
00040c 914f      	POP  R20
00040d 913f      	POP  R19
00040e 912f      	POP  R18
00040f 911f      	POP  R17
000410 2366      	TST  R22
000411 f032      	BRMI __DIVF215
000412 0f55      	LSL  R21
000413 1fee      	ROL  R30
000414 1fff      	ROL  R31
000415 1f66      	ROL  R22
000416 957a      	DEC  R23
000417 f243      	BRVS __DIVF217
                 __DIVF215:
000418 dedb      	RCALL __ROUND_REPACK
000419 915f      	POP  R21
00041a 9508      	RET
                 
                 __CMPF12:
00041b 2399      	TST  R25
00041c f09a      	BRMI __CMPF120
00041d 2377      	TST  R23
00041e f042      	BRMI __CMPF121
00041f 1797      	CP   R25,R23
000420 f048      	BRLO __CMPF122
000421 f429      	BRNE __CMPF121
000422 17ae      	CP   R26,R30
000423 07bf      	CPC  R27,R31
000424 0786      	CPC  R24,R22
000425 f020      	BRLO __CMPF122
000426 f031      	BREQ __CMPF123
                 __CMPF121:
000427 9498      	CLZ
000428 9488      	CLC
000429 9508      	RET
                 __CMPF122:
00042a 9498      	CLZ
00042b 9408      	SEC
00042c 9508      	RET
                 __CMPF123:
00042d 9418      	SEZ
00042e 9488      	CLC
00042f 9508      	RET
                 __CMPF120:
000430 2377      	TST  R23
000431 f7c2      	BRPL __CMPF122
000432 1797      	CP   R25,R23
000433 f398      	BRLO __CMPF121
000434 f7a9      	BRNE __CMPF122
000435 17ea      	CP   R30,R26
000436 07fb      	CPC  R31,R27
000437 0768      	CPC  R22,R24
000438 f388      	BRLO __CMPF122
000439 f399      	BREQ __CMPF123
00043a cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
00043b 95f1      	NEG  R31
00043c 95e1      	NEG  R30
00043d 40f0      	SBCI R31,0
00043e 9508      	RET
                 
                 __ANEGD1:
00043f 95f0      	COM  R31
000440 9560      	COM  R22
000441 9570      	COM  R23
000442 95e1      	NEG  R30
000443 4fff      	SBCI R31,-1
000444 4f6f      	SBCI R22,-1
000445 4f7f      	SBCI R23,-1
000446 9508      	RET
                 
                 __CWD1:
000447 2f6f      	MOV  R22,R31
000448 0f66      	ADD  R22,R22
000449 0b66      	SBC  R22,R22
00044a 2f76      	MOV  R23,R22
00044b 9508      	RET
                 
                 __CWD2:
00044c 2f8b      	MOV  R24,R27
00044d 0f88      	ADD  R24,R24
00044e 0b88      	SBC  R24,R24
00044f 2f98      	MOV  R25,R24
000450 9508      	RET
                 
                 __DIVW21U:
000451 2400      	CLR  R0
000452 2411      	CLR  R1
000453 e190      	LDI  R25,16
                 __DIVW21U1:
000454 0faa      	LSL  R26
000455 1fbb      	ROL  R27
000456 1c00      	ROL  R0
000457 1c11      	ROL  R1
000458 1a0e      	SUB  R0,R30
000459 0a1f      	SBC  R1,R31
00045a f418      	BRCC __DIVW21U2
00045b 0e0e      	ADD  R0,R30
00045c 1e1f      	ADC  R1,R31
00045d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00045e 60a1      	SBR  R26,1
                 __DIVW21U3:
00045f 959a      	DEC  R25
000460 f799      	BRNE __DIVW21U1
000461 01fd      	MOVW R30,R26
000462 01d0      	MOVW R26,R0
000463 9508      	RET
                 
                 __DIVW21:
000464 d012      	RCALL __CHKSIGNW
000465 dfeb      	RCALL __DIVW21U
000466 f40e      	BRTC __DIVW211
000467 dfd3      	RCALL __ANEGW1
                 __DIVW211:
000468 9508      	RET
                 
                 __MODW21:
000469 94e8      	CLT
00046a ffb7      	SBRS R27,7
00046b c004      	RJMP __MODW211
00046c 95a0      	COM  R26
00046d 95b0      	COM  R27
00046e 9611      	ADIW R26,1
00046f 9468      	SET
                 __MODW211:
000470 fdf7      	SBRC R31,7
000471 dfc9      	RCALL __ANEGW1
000472 dfde      	RCALL __DIVW21U
000473 01fd      	MOVW R30,R26
000474 f40e      	BRTC __MODW212
000475 dfc5      	RCALL __ANEGW1
                 __MODW212:
000476 9508      	RET
                 
                 __CHKSIGNW:
000477 94e8      	CLT
000478 fff7      	SBRS R31,7
000479 c002      	RJMP __CHKSW1
00047a dfc0      	RCALL __ANEGW1
00047b 9468      	SET
                 __CHKSW1:
00047c ffb7      	SBRS R27,7
00047d c006      	RJMP __CHKSW2
00047e 95a0      	COM  R26
00047f 95b0      	COM  R27
000480 9611      	ADIW R26,1
000481 f800      	BLD  R0,0
000482 9403      	INC  R0
000483 fa00      	BST  R0,0
                 __CHKSW2:
000484 9508      	RET
                 
                 __GETD1S0:
000485 81e8      	LD   R30,Y
000486 81f9      	LDD  R31,Y+1
000487 816a      	LDD  R22,Y+2
000488 817b      	LDD  R23,Y+3
000489 9508      	RET
                 
                 __PUTD1S0:
00048a 83e8      	ST   Y,R30
00048b 83f9      	STD  Y+1,R31
00048c 836a      	STD  Y+2,R22
00048d 837b      	STD  Y+3,R23
00048e 9508      	RET
                 
                 __PUTPARD2:
00048f 939a      	ST   -Y,R25
000490 938a      	ST   -Y,R24
000491 93ba      	ST   -Y,R27
000492 93aa      	ST   -Y,R26
000493 9508      	RET
                 
                 __CDF2U:
000494 9468      	SET
000495 c001      	RJMP __CDF2U0
                 __CDF2:
000496 94e8      	CLT
                 __CDF2U0:
000497 d001      	RCALL __SWAPD12
000498 dec2      	RCALL __CDF1U0
                 
                 __SWAPD12:
000499 2e18      	MOV  R1,R24
00049a 2f86      	MOV  R24,R22
00049b 2d61      	MOV  R22,R1
00049c 2e19      	MOV  R1,R25
00049d 2f97      	MOV  R25,R23
00049e 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00049f 2e1b      	MOV  R1,R27
0004a0 2fbf      	MOV  R27,R31
0004a1 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0004a2 2e1a      	MOV  R1,R26
0004a3 2fae      	MOV  R26,R30
0004a4 2de1      	MOV  R30,R1
0004a5 9508      	RET
                 
                 __SAVELOCR4:
0004a6 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004a7 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004a8 931a      	ST   -Y,R17
0004a9 930a      	ST   -Y,R16
0004aa 9508      	RET
                 
                 __LOADLOCR4:
0004ab 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004ac 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004ad 8119      	LDD  R17,Y+1
0004ae 8108      	LD   R16,Y
0004af 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  60 r1 :  30 r2 :   0 r3 :   0 r4 :  10 r5 :   9 r6 :  11 r7 :   9 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  16 r17:  29 r18:  26 r19:  25 r20:  18 r21:  52 r22:  51 r23:  47 
r24:  50 r25:  42 r26:  98 r27:  46 r28:  10 r29:   1 r30: 193 r31:  63 
x  :   6 y  :  94 z  :   9 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   9 
adiw  :  11 and   :   2 andi  :   4 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  24 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   6 brmi  :   7 brne  :  35 brpl  :   6 brsh  :   1 brtc  :   3 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   1 call  :  26 
cbi   :   5 cbr   :   0 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  26 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 
cp    :  10 cpc   :  19 cpi   :  23 cpse  :   0 dec   :  12 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   4 jmp   :  25 ld    :  19 ldd   :  26 ldi   : 149 
lds   :   4 lpm   :   9 lsl   :  11 lsr   :   1 mov   :  62 movw  :  22 
mul   :   9 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :  16 
ori   :  10 out   :  26 pop   :  20 push  :  19 rcall :  78 ret   :  40 
reti  :   0 rjmp  :  55 rol   :  25 ror   :   7 sbc   :   7 sbci  :   8 
sbi   :   8 sbic  :   0 sbis  :   1 sbiw  :  13 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   4 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  44 std   :  12 sts   :   2 sub   :   3 subi  :   7 swap  :   1 
tst   :  15 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000960   2292    108   2400   32768   7.3%
[.dseg] 0x000060 0x000271      0     17     17    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
